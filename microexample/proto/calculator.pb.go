// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/wlibo666/mpaas-micro/micro/examples/calculator/proto/calculator.proto

/*
Package micro_calc is a generated protocol buffer package.

It is generated from these files:
	github.com/wlibo666/mpaas-micro/micro/examples/calculator/proto/calculator.proto

It has these top-level messages:
	AddReq
	AddRes
	MulReq
	MulRes
*/
package calculator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddReq struct {
	Num1 int64 `protobuf:"varint,1,opt,name=Num1" json:"Num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=Num2" json:"Num2,omitempty"`
}

func (m *AddReq) Reset()                    { *m = AddReq{} }
func (m *AddReq) String() string            { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()               {}
func (*AddReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddReq) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *AddReq) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type AddRes struct {
	Res int64  `protobuf:"varint,1,opt,name=Res" json:"Res,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *AddRes) Reset()                    { *m = AddRes{} }
func (m *AddRes) String() string            { return proto.CompactTextString(m) }
func (*AddRes) ProtoMessage()               {}
func (*AddRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddRes) GetRes() int64 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *AddRes) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type MulReq struct {
	Num1 int64 `protobuf:"varint,1,opt,name=Num1" json:"Num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=Num2" json:"Num2,omitempty"`
}

func (m *MulReq) Reset()                    { *m = MulReq{} }
func (m *MulReq) String() string            { return proto.CompactTextString(m) }
func (*MulReq) ProtoMessage()               {}
func (*MulReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MulReq) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *MulReq) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type MulRes struct {
	Res int64  `protobuf:"varint,1,opt,name=Res" json:"Res,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *MulRes) Reset()                    { *m = MulRes{} }
func (m *MulRes) String() string            { return proto.CompactTextString(m) }
func (*MulRes) ProtoMessage()               {}
func (*MulRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MulRes) GetRes() int64 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *MulRes) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*AddReq)(nil), "micro.calc.AddReq")
	proto.RegisterType((*AddRes)(nil), "micro.calc.AddRes")
	proto.RegisterType((*MulReq)(nil), "micro.calc.MulReq")
	proto.RegisterType((*MulRes)(nil), "micro.calc.MulRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Calculator service

type CalculatorClient interface {
	Add(ctx context.Context, in *AddReq, opts ...client.CallOption) (*AddRes, error)
	Mul(ctx context.Context, in *MulReq, opts ...client.CallOption) (*MulRes, error)
}

type calculatorClient struct {
	c           client.Client
	serviceName string
}

func NewCalculatorClient(serviceName string, c client.Client) CalculatorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "micro.calc"
	}
	return &calculatorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *calculatorClient) Add(ctx context.Context, in *AddReq, opts ...client.CallOption) (*AddRes, error) {
	req := c.c.NewRequest(c.serviceName, "Calculator.Add", in)
	out := new(AddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Mul(ctx context.Context, in *MulReq, opts ...client.CallOption) (*MulRes, error) {
	req := c.c.NewRequest(c.serviceName, "Calculator.Mul", in)
	out := new(MulRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Calculator service

type CalculatorHandler interface {
	Add(context.Context, *AddReq, *AddRes) error
	Mul(context.Context, *MulReq, *MulRes) error
}

func RegisterCalculatorHandler(s server.Server, hdlr CalculatorHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Calculator{hdlr}, opts...))
}

type Calculator struct {
	CalculatorHandler
}

func (h *Calculator) Add(ctx context.Context, in *AddReq, out *AddRes) error {
	return h.CalculatorHandler.Add(ctx, in, out)
}

func (h *Calculator) Mul(ctx context.Context, in *MulReq, out *MulRes) error {
	return h.CalculatorHandler.Mul(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/wlibo666/mpaas-micro/micro/examples/calculator/proto/calculator.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xb1, 0x4e, 0xc5, 0x20,
	0x18, 0x85, 0x5b, 0x31, 0x4d, 0xfc, 0x27, 0xc3, 0xd4, 0x74, 0x32, 0x4c, 0x0e, 0x06, 0xb4, 0x3e,
	0x41, 0x63, 0x3a, 0xd6, 0x81, 0x37, 0x40, 0x60, 0x68, 0x02, 0xa5, 0x42, 0x31, 0x3e, 0xbe, 0x81,
	0x92, 0xaa, 0xe9, 0x72, 0xef, 0x76, 0xf2, 0x85, 0xef, 0x84, 0xf3, 0xc3, 0x68, 0xe7, 0x45, 0xfb,
	0x2f, 0xc1, 0x82, 0x34, 0x2e, 0x2a, 0x66, 0x57, 0x21, 0x02, 0xb3, 0xb3, 0xf4, 0x8e, 0xe9, 0x6f,
	0x61, 0x57, 0xa3, 0x03, 0x93, 0xc2, 0xc8, 0x68, 0xc4, 0xe6, 0x3c, 0x5b, 0xbd, 0xdb, 0xdc, 0x1f,
	0x40, 0x33, 0xc0, 0x90, 0x0d, 0x9a, 0x38, 0x79, 0x86, 0x66, 0x50, 0x8a, 0xeb, 0x4f, 0x8c, 0xe1,
	0xf6, 0x3d, 0xda, 0x97, 0xb6, 0x7e, 0xa8, 0x1f, 0x11, 0xcf, 0xb9, 0xb0, 0xbe, 0xbd, 0x39, 0x58,
	0x4f, 0x9e, 0x8a, 0x11, 0xf0, 0x3d, 0x20, 0xae, 0x43, 0x11, 0x50, 0x21, 0xa3, 0xf7, 0xf9, 0xf9,
	0x1d, 0x4f, 0x31, 0xf5, 0x4f, 0xd1, 0x5c, 0xd9, 0x9f, 0x8d, 0x8b, 0xfa, 0xfb, 0x05, 0xe0, 0xed,
	0xd8, 0x87, 0x19, 0xa0, 0x41, 0x29, 0x8c, 0xe9, 0xef, 0x42, 0xba, 0xcf, 0xeb, 0xce, 0x2c, 0x90,
	0x2a, 0x09, 0x53, 0x34, 0xff, 0x85, 0xfd, 0xbf, 0xdd, 0x99, 0x05, 0x52, 0x7d, 0x34, 0xf9, 0x84,
	0xaf, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x97, 0x9f, 0xaf, 0x8b, 0x01, 0x00, 0x00,
}
